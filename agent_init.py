# The agent amount and appearing pattern is up to the flow rate
# left   [18.06401473612688, 59.335452172966214],[18.064100110261663, 59.33536413262037]
#   to   [18.06404262307202, 59.335459207276195],[18.064127997206803, 59.33537116693035]
# str1.4 [18.064025548245063, 59.335476815345366],[18.06414507203376, 59.33535355886118]
# right  [18.063562967615574, 59.335338217144546],[18.06364834175036, 59.3352501767987]
#   to   [18.063523925892376, 59.33532836911058],[18.06360930002716, 59.33524032876473]
# str1.4 [18.06350685106542, 59.33534597717975],[18.063626374854117, 59.33522272069556]

# PATTERN RESULT right side, in appearing order:
# [
#     [18.06360391738791, 59.33528596671802],
#     [18.063551744305542, 59.33533976915159],
#     [18.063550007010488, 59.33533153889798],
#     [18.063586682653014, 59.33531376149292],
#     [18.06363237543284, 59.33525661993607],
#     [18.063602180092857, 59.33527773646441],
#     [18.063616409115323, 59.335263063073434],
#     [18.063565973328007, 59.335325095760616],
#     [18.063587951070392, 59.335292409855384],
#     [18.063629369720406, 59.33526974132],
#     [18.06356897904044, 59.33531197437668],
#     [18.063581939645527, 59.33531865262325],
#     [18.063586213775338, 59.33528417960177],
#     [18.06356771062306, 59.33533332601422],
#     [18.063578465055418, 59.33530219211603],
#     [18.063634112727893, 59.335264850189674],
#     [18.063562498737898, 59.33530863525339],
#     [18.063560761442844, 59.335300404999785],
#     [18.063535309110346, 59.3353166303978],
#     [18.063581470767847, 59.335289070732095],
#     [18.063534040692968, 59.33533798203534],
#     [18.06351807437545, 59.33534442517271],
#     [18.06355301272292, 59.33531841751404],
#     [18.063595699790312, 59.33527439734112],
#     [18.063543526707946, 59.33532819977469],
#     [18.06356550445033, 59.33529551386946],
#     [18.063579733472796, 59.33528084047849],
#     [18.0636004427978, 59.33526950621079],
#     [18.06354953813281, 59.33530195700683]
# ]

# PATTERN RESULT left side, in appearing order:
# [
#     [18.064021223397788, 59.3354669583937],
#     [18.064078139487645, 59.33540826482981],
#     [18.064066491049033, 59.33541311861463],
#     [18.06403112757298, 59.335442428051074],
#     [18.06408113823171, 59.335383697141665],
#     [18.064094949093963, 59.33538377183268],
#     [18.064085881239198, 59.33537880601134],
#     [18.064069071632883, 59.335403299008476],
#     [18.06403845116432, 59.33542771731459],
#     [18.06405700503406, 59.33542290087528],
#     [18.064080720071498, 59.33539844522366],
#     [18.064066072888817, 59.33542786669661],
#     [18.06404751901908, 59.33543268313593],
#     [18.064028546989128, 59.33545224765723],
#     [18.064047937179296, 59.33541793505394],
#     [18.064019479134366, 59.33544728183589],
#     [18.06403370815683, 59.33543260844492],
#     [18.064097529677813, 59.335373952226526]
# ]

#!/usr/bin/env python3
def position_pattern(refA, refB, backA):
    n = 18
    agents = []
    unitX = (refB[0] - refA[0]) / n
    unitY = (refB[1] - refA[1]) / n
    for i in range(n):
        init_pos = []
        init_pos.append(refA[0] + unitX * i)
        init_pos.append(refA[1] + unitY * i)
        agents.append(init_pos)
    backX = (backA[0] - refA[0]) / 5
    backY = (backA[1] - refA[1]) / 5
    # random numbers + subjective adjustment
    backlist = [3, 0, 2, 1, 0, 0, 2, 0, 2, 4, 2, 1, 3, 2, 0, 0, 2, 1]
    for i in range(len(agents)):
        agents[i][0] += backlist[i] * backX
        agents[i][1] += backlist[i] * backY
    print(agents)

# right side first
# position_pattern(
#     [18.063562967615574, 59.335338217144546],[18.06364834175036, 59.3352501767987],
#     [18.06350685106542, 59.33534597717975]
#     )

# left side first
# position_pattern(
#     [18.06401473612688, 59.335452172966214],[18.064100110261663, 59.33536413262037],
#     [18.064025548245063, 59.335476815345366]
#     )
